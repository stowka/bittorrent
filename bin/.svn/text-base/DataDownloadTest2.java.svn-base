
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;

import junit.framework.Assert;

import org.junit.Before;
import org.junit.Test;
import org.junit.After;

import test.Download;
import torrent.Torrent;
import bencoding.InvalidBEncodingException;


public class DataDownloadTest2 {

	private boolean finished = false;
	private boolean success = false;

	private Process trackerProcess = null;
	private Process clientProcess = null;
	
	private BufferedReader clientStdOut = null;

	/*
	 * Set this variable to true in order to run the test with encryption !
	 * 
	 */
	private boolean testWithEncryption = false;
	
	@Before
	public void setup() throws IOException, InterruptedException {
		// Start the tracker
//		trackerProcess = TestUtils.jarStarter(new String[]{"tracker.jar"});
//		TestUtils.waitForServerSocket(6969);

		// Start uploading
//		clientProcess = TestUtils.jarStarter(new String[]{"client.jar", testWithEncryption ? "--enableEncryption" : "--disableEncryption"});

		// The code bellow makes sure that the client is started (no more magic numbers !)
//		clientStdOut = new BufferedReader(new InputStreamReader(clientProcess.getInputStream()));

//		String line = null;
//		
//		while ((line = clientStdOut.readLine()) != null && ! line.contains("[Torrent] Our client port = "));
//		
//		Assert.assertNotNull(line);
//		
//		int clientPort = Integer.parseInt(line.substring("[Torrent] Our client port = ".length()));
//		
//		TestUtils.waitForServerSocket(clientPort);
//	}
	
	@Test
	public void testDataExchange() throws InterruptedException, InvalidBEncodingException, IOException {
		// Start downloading
		new Thread() {
			public void run() {
				try {
					Download download = new Download();
					Torrent torrent = new Torrent("data/LePetitPrince.torrent");
					download.run("data/LePetitPrince.torrent", true, false);
					while(true) {
						if(torrent.isComplete()) {
							success = true;
							finished = true;
						}
						Thread.sleep(200L);
					}
				} catch (Exception e) {
					throw new Error(e);
				}
			}
		}.start();
		
		while(!finished) {
			Thread.sleep(200L);
		}
		
		Assert.assertTrue(success);
	}

	@After
	public void exit() throws IOException {
		if (testWithEncryption)
			Assert.assertTrue(TestUtils.isEncrypted(clientStdOut));
		
		System.out.println("Exiting...");
		
		if (clientProcess != null) clientProcess.destroy();
		if (trackerProcess != null) trackerProcess.destroy();
	}
	
}
