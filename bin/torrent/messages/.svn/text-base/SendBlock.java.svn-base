package torrent.messages;

import java.io.DataOutputStream;
import java.io.IOException;

/**
 * CLASSE SENDBLOCK : modelise un message SendBlock qui 
 * permet d'envoyer un block de donnees.
 * @author DE GIETER-VENDE Antoine && MARGUET Alban (groupe 36)
 * 
 *
 */
public class SendBlock extends Message {
	private byte[] body;
	private String bodyS;
	
	/**
	 * CONSTRUCTEUR
	 * @param index : int, index du message.
	 * @param begin : int, debut du message.
	 * @param x : byte[], le reste du message.
	 */
	public SendBlock(int index, int begin, byte[] x) {
		super(9 + x.length, ID.piece);
		bodyS = "" + index + begin + x.toString();
		body = bodyS.getBytes();
		System.out.println("sendblock created");
	}

	/**
	 * methode d'ecriture du message
	 * @param dos : DataOutputStream, flux de données dans laquelle la methode va écrire.
	 */
	@Override
	public void write(DataOutputStream dos) {
		try {
			dos.writeInt(length);
			dos.write(id.ordinal());
			dos.write(body);
			dos.flush();
			System.out.println("sendblock written");
		} catch (IOException e) {
			System.out.println("erreur envoi message");
		}
	}

	/**
	 * @param visitor : MessageVisitor, permet l'utilisation du pattern Visitor avec le message Unchoke.
	 */
	public void accept(MessageVisitor visitor) {
		visitor.visit(this);
	}
	
	/**
	 * getter
	 * @return body : byte[] le corps du message.
	 */
	public byte[] getBody() {
		return body;
	}
}
